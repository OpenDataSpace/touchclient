{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "UploadController"
    },
    "designerId": "0d54e10f-ec26-43e9-94af-bf7f30365974",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "checkAccessLevel",
                "designer|params": [
                    "items",
                    "accessLevel",
                    "grantCallback",
                    "denyCallback",
                    "failedCallback"
                ],
                "implHandler": [
                    "var me = this,\r",
                    "    ids = [];\r",
                    "\r",
                    "if (items && (Ext.isNumber(items) || Ext.isArray(items))) {\r",
                    "\r",
                    "    if (Ext.isArray(items)) {\r",
                    "        items.forEach(function(el) {\r",
                    "            ids.push(el.get('id'));\r",
                    "        });\r",
                    "    } else {\r",
                    "        ids = [items];\r",
                    "    }\r",
                    "\r",
                    "    Ext.Ajax.request({\r",
                    "        method: 'GET',\r",
                    "        url: '/api/rest/dataspace/hasAccessLevel.json',\r",
                    "        params: {\r",
                    "            objectIds: ids,\r",
                    "            accessLevel: accessLevel\r",
                    "        },\r",
                    "        success: function (response) {\r",
                    "            var ok = Ext.decode(response.responseText).hasAccessLevel;\r",
                    "            if (ok) {\r",
                    "                grantCallback();\r",
                    "            } else {\r",
                    "                if (denyCallback) {\r",
                    "                    denyCallback();\r",
                    "                }\r",
                    "            }\r",
                    "        },\r",
                    "        failure: function(response) { \r",
                    "            if (failedCallback) {\r",
                    "                failedCallback(Ext.decode(response.responseText));\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "} else {\r",
                    "    if (!Ext.isEmpty(items)) {\r",
                    "        if (failedCallback) {\r",
                    "            failedCallback(\"invalid argument\");\r",
                    "        }\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "e9b99a19-7c84-4ac0-90e3-186d08229ecf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initUploader",
                "designer|params": [
                    "container"
                ],
                "implHandler": [
                    "var me = this,\r",
                    "    folderStore = container.down('#documentList').getStore(),\r",
                    "    folderId = folderStore.folderId,\r",
                    "    qStore = Ext.getStore('UploadQueue'),\r",
                    "    uploader = new plupload.Uploader({\r",
                    "        'runtimes': 'html5',\r",
                    "        'browse_button': container.down('#uploadButton').getId(),\r",
                    "        'max_file_size': '100gb',\r",
                    "        'chunk_size': '256kb',\r",
                    "        'url': '/api/rest/object/upload?renameifrequired=true&target=' + folderId\r",
                    "    });\r",
                    "\r",
                    "me.uploaders.push(uploader);\r",
                    "\r",
                    "uploader.init();\r",
                    "\r",
                    "uploader.bind('FilesAdded', function(up, files) {\r",
                    "    var autoStart = ACUtils.utils.getConfigValue('ACMobile.config.autoStartUpload');\r",
                    "    if (!me.uploadQueue) {\r",
                    "        me.uploadQueue = MyGlobals.menuPanel.getComponent('tabPanel').add({\r",
                    "            'xtype': 'uploadqueue',\r",
                    "            'listeners': {\r",
                    "                'cancel': {\r",
                    "                    'fn': me.onQueueCancelTapped,\r",
                    "                    'scope': me\r",
                    "                },\r",
                    "                'start': {\r",
                    "                    'fn': me.onQueueStartTapped,\r",
                    "                    'scope': me\r",
                    "                },\r",
                    "                'stop': {\r",
                    "                    'fn': me.onQueueStopTapped,\r",
                    "                    'scope': me\r",
                    "                }\r",
                    "            }\r",
                    "        });\r",
                    "    }\r",
                    "    files.forEach(function(el) {\r",
                    "        var record = Ext.create('ACMobileClient.model.UploadQueueElement');\r",
                    "        record.setData({\r",
                    "            'id': el.id,\r",
                    "            'name': el.name,\r",
                    "            'status': el.status,\r",
                    "            'percent': el.percent,\r",
                    "            'target': folderId\r",
                    "        });\r",
                    "        qStore.add(record);\r",
                    "    });\r",
                    "    qStore.sync();\r",
                    "    if (autoStart && autoStart.get('value') === 'true') {\r",
                    "        me.onQueueStartTapped();\r",
                    "    }\r",
                    "});\r",
                    "uploader.bind('UploadProgress', function(up, file) {\r",
                    "    var rec;\r",
                    "    if (Ext.isNumber(file.percent)) {\r",
                    "        rec = qStore.findRecord('id', file.id);\r",
                    "        if (rec) {\r",
                    "            if (rec.get('percent') !== file.percent) {\r",
                    "                rec.set('percent', file.percent);\r",
                    "                rec.set('status', file.status);\r",
                    "                qStore.sync();\r",
                    "            }\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "uploader.bind('FileUploaded', function(up, file) {\r",
                    "    var rec = qStore.findRecord('id', file.id),\r",
                    "        tp = MyGlobals.menuPanel.getComponent('tabPanel');\r",
                    "    if (rec) {\r",
                    "        qStore.remove(rec);\r",
                    "        qStore.sync();\r",
                    "    }\r",
                    "    if (qStore.getCount() === 0) {\r",
                    "        // Queue is empty, remove it\r",
                    "        me.uploaders.forEach(function(up) {\r",
                    "            up.splice(0);\r",
                    "            up.destroy();\r",
                    "        });\r",
                    "        me.uploaders = [];\r",
                    "        // qStore.removeAll(true);\r",
                    "        tp.remove(me.uploadQueue, true);\r",
                    "        me.uploadQueue = null;\r",
                    "    }\r",
                    "    folderStore.load();\r",
                    "});\r",
                    "uploader.bind('UploadComplete', function(up, files) {\r",
                    "    folderStore.load();\r",
                    "});\r",
                    "uploader.bind('Error', function(up, err) {\r",
                    "    var rec, msg = '';\r",
                    "    if (err.file) {\r",
                    "        rec = qStore.findRecord('id', err.file.id);\r",
                    "        if (rec) {\r",
                    "            rec.set('status', err.file.status);\r",
                    "            if (err.message) {\r",
                    "                msg = err.message + ' ';\r",
                    "            }\r",
                    "            if (err.status) {\r",
                    "                msg += '' + err.status;\r",
                    "            }\r",
                    "            if (msg !== '') {\r",
                    "                rec.set('message', msg);\r",
                    "            }\r",
                    "            qStore.sync();\r",
                    "        }\r",
                    "    }\r",
                    "    up.refresh();\r",
                    "});"
                ]
            },
            "designerId": "b00ce35b-cb0f-4b3e-b2c2-690e1e462649"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "MyGlobals.uploadController = this;\r",
                    "this.uploaders = [];"
                ]
            },
            "designerId": "58698dd7-1cf8-497d-bef7-68525c14aa9c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onQueueCancelTapped",
                "implHandler": [
                    "var me = this,\r",
                    "    qStore = Ext.getStore('UploadQueue'),\r",
                    "    qView = me.uploadQueue.getComponent('Queue'),\r",
                    "    tp = MyGlobals.menuPanel.getComponent('tabPanel'),\r",
                    "    wasRunning = false;\r",
                    "\r",
                    "me.uploaders.forEach(function(up) {\r",
                    "    if (up.state === plupload.RUNNING) {\r",
                    "        up.stop();\r",
                    "        wasRunning = true;\r",
                    "    }\r",
                    "});\r",
                    "if (0 < qView.getSelectionCount()) {\r",
                    "    // Remove selected files\r",
                    "    qView.getSelection().forEach(function(rec) {\r",
                    "        if (rec.get('status') < 4) {\r",
                    "            me.uploaders.forEach(function(up) {\r",
                    "                var f = up.getFile(rec.get('id'));\r",
                    "                if (f) {\r",
                    "                    up.removeFile(f);\r",
                    "                }\r",
                    "            });\r",
                    "        }\r",
                    "        qStore.remove(rec);\r",
                    "    });\r",
                    "    qStore.sync();\r",
                    "    if (wasRunning) {\r",
                    "        me.uploaders.forEach(function(up) {\r",
                    "            up.start();\r",
                    "        });\r",
                    "    }\r",
                    "} else {\r",
                    "    // Remove all uploads and the queue\r",
                    "    me.uploaders.forEach(function(up) {\r",
                    "        up.splice(0);\r",
                    "        up.destroy();\r",
                    "    });\r",
                    "    me.uploaders = [];\r",
                    "    qStore.removeAll(true);\r",
                    "    tp.remove(me.uploadQueue, true);\r",
                    "    me.uploadQueue = null;\r",
                    "}"
                ]
            },
            "designerId": "240ea522-5baf-40ac-ae55-bc12816bab98"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onQueueStartTapped",
                "implHandler": [
                    "var me = this,\r",
                    "    toolbar = me.uploadQueue.down('toolbar');\r",
                    "\r",
                    "toolbar.getComponent('Start').hide();\r",
                    "toolbar.getComponent('Stop').show();\r",
                    "me.uploaders.forEach(function(up) {\r",
                    "    up.start();\r",
                    "});"
                ]
            },
            "designerId": "3717c30f-d8cd-4e9e-b16a-386a110a21a1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onQueueStopTapped",
                "implHandler": [
                    "var me = this,\r",
                    "    toolbar = me.uploadQueue.down('toolbar');\r",
                    "\r",
                    "toolbar.getComponent('Stop').hide();\r",
                    "toolbar.getComponent('Start').show();\r",
                    "me.uploaders.forEach(function(up) {\r",
                    "\tup.stop();\r",
                    "});"
                ]
            },
            "designerId": "6df4de63-e4dd-4768-84b2-f95ccf02c8ff"
        }
    ]
}