/*
 * File: app/controller/UploadController.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ACMobileClient.controller.UploadController', {
    extend: 'Ext.app.Controller',

    config: {
    },

    checkAccessLevel: function(items, accessLevel, grantCallback, denyCallback, failedCallback) {
        var me = this,
            ids = [];

        if (items && (Ext.isNumber(items) || Ext.isArray(items))) {

            if (Ext.isArray(items)) {
                items.forEach(function(el) {
                    ids.push(el.get('id'));
                });
            } else {
                ids = [items];
            }

            Ext.Ajax.request({
                method: 'GET',
                url: '/api/rest/dataspace/hasAccessLevel.json',
                params: {
                    objectIds: ids,
                    accessLevel: accessLevel
                },
                success: function (response) {
                    var ok = Ext.decode(response.responseText).hasAccessLevel;
                    if (ok) {
                        grantCallback();
                    } else {
                        if (denyCallback) {
                            denyCallback();
                        }
                    }
                },
                failure: function(response) { 
                    if (failedCallback) {
                        failedCallback(Ext.decode(response.responseText));
                    }
                }
            });

        } else {
            if (!Ext.isEmpty(items)) {
                if (failedCallback) {
                    failedCallback("invalid argument");
                }
            }
        }
    },

    initUploader: function(container) {
        var me = this,
            folderStore = container.down('#documentList').getStore(),
            folderId = folderStore.folderId,
            uploader = new plupload.Uploader({
                'runtimes': 'html5',
                'browse_button': container.down('#uploadButton').getId(),
                'max_file_size': '100gb',
                'chunk_size': '8192kb',
                'url': '/api/rest/object/upload?renameifrequired=true&target=' + folderId
            });

        container.uploader = uploader;

        uploader.init();

        uploader.bind('FilesAdded', function(up, files) {
            if (!me.uploadQueue) {
                me.uploadQueue = MyGlobals.menuPanel.getComponent('tabPanel').add({
                    'xtype': 'uploadqueue',
                    'listeners': {
                        'cancel': {
                            'fn': me.onUploadCancelTapped,
                            'scope': me
                        }
                    }
                });
            }
            files.forEach(function(el) {
                console.debug('ul_added: ', el.name);
            });
            up.start();
        });
        uploader.bind('UploadProgress', function(up, file) {
            console.debug('ul_progress: ', file.name, file.percent);
        });
        uploader.bind('FileUploaded', function(up, file) {
            console.debug('ul_uploaded: ', file.name);
        });
        uploader.bind('UploadComplete', function(up, files) {
            console.debug('ul_complete');
            folderStore.load();
        });
        uploader.bind('UploadComplete', function(up, files) {
            console.debug('ul_complete');
        });
        uploader.bind('Error', function(up, err) {
            console.debug('ul_error', err.code, err.message);
            /*
            $('#filelist').append("<div>Error: " + err.code +
            ", Message: " + err.message +
            (err.file ? ", File: " + err.file.name : "") +
            "</div>"
            );
            */
            up.refresh();
        });
    },

    launch: function() {
        MyGlobals.uploadController = this;
    },

    onUploadCancelTapped: function() {
        var me = this, tp = MyGlobals.menuPanel.getComponent('tabPanel');

        tp.remove(me.uploadQueue, true);
        me.uploadQueue = null;
    },

    onUploadTapped: function(dstFolderStore) {
        var me = this;
        if (!me.uploadQueue) {
            me.uploadQueue = MyGlobals.menuPanel.getComponent('tabPanel').add({
                'xtype': 'uploadqueue',
                'listeners': {
                    'cancel': {
                        'fn': me.onUploadCancelTapped,
                        'scope': me
                    }
                }
            });
        }
    }

});