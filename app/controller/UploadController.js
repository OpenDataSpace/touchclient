/*
 * File: app/controller/UploadController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
Ext.define('ACMobileClient.controller.UploadController', {
    extend: 'Ext.app.Controller',

    config: {
    },

    checkAccessLevel: function(items, accessLevel, grantCallback, denyCallback, failedCallback) {
        var me = this,
            ids = [];

        if (items && (Ext.isNumber(items) || Ext.isArray(items))) {

            if (Ext.isArray(items)) {
                items.forEach(function(el) {
                    ids.push(el.get('id'));
                });
            } else {
                ids = [items];
            }

            Ext.Ajax.request({
                method: 'GET',
                url: '/api/rest/dataspace/hasAccessLevel.json',
                params: {
                    objectIds: ids,
                    accessLevel: accessLevel
                },
                success: function (response) {
                    var ok = Ext.decode(response.responseText).hasAccessLevel;
                    if (ok) {
                        grantCallback();
                    } else {
                        if (denyCallback) {
                            denyCallback();
                        }
                    }
                },
                failure: function(response) { 
                    if (failedCallback) {
                        failedCallback(Ext.decode(response.responseText));
                    }
                }
            });

        } else {
            if (!Ext.isEmpty(items)) {
                if (failedCallback) {
                    failedCallback("invalid argument");
                }
            }
        }
    },

    initUploader: function(container) {
        // console.log("In initUploader")
        // console.log("browse_button: "+container.down('#uploadButton').getId())

        var me = this,
            folderStore = container.down('#documentList').getStore(),
            folderId = folderStore.folderId,
            qStore = Ext.getStore('UploadQueue'),
            chunkSize = '256kb',
            uploader;

        if(navigator.platform === 'BlackBerry'){
            chunkSize = '0';
        }

        uploader = new plupload.Uploader({
            'runtimes': 'html5',
            'browse_button': container.down('#uploadButton').getId(),
            'max_file_size': '100gb',
            'chunk_size': chunkSize, //256kb
            //'multi_selection': false,
            'url': '/api/rest/object/upload?renameifrequired=true&target=' + folderId
        });

        me.uploaders.push(uploader);

        uploader.init();

        uploader.bind('FilesAdded', function(up, files) {
            //console.log("In File Added")
            //console.log(me.uploaders)
            // console.log(navigator.userAgent)
            // console.log(files)
            // console.log(uploader)
            //MyGlobals.mainPanel.handleOrientationChange()
            var autoStart = ACUtils.utils.getConfigValue('ACMobile.config.autoStartUpload');
            if (!me.uploadQueue) {
                me.uploadQueue = MyGlobals.menuPanel.getComponent('tabPanel').add({
                    'xtype': 'uploadqueue',
                    'listeners': {
                        'cancel': {
                            'fn': me.onQueueCancelTapped,
                            'scope': me
                        },
                        'start': {
                            'fn': me.onQueueStartTapped,
                            'scope': me
                        },
                        'stop': {
                            'fn': me.onQueueStopTapped,
                            'scope': me
                        }
                    }
                });
            }

            if(Ext.os.name === 'iOS'){
                if(typeof MyGlobals.uploadPointer[folderId] === 'undefined'){ 
                    MyGlobals.uploadPointer[folderId] = 0;
                }
            }

            files.forEach(function(el) {
                var record = Ext.create('ACMobileClient.model.UploadQueueElement');
                    filePath = MyGlobals.folderStructure[folderId];
                    //filePath.push(el.name);
                    filePath = filePath.join('/');

                if(Ext.os.name === 'iOS' && el.name === 'image.jpg'){
                    MyGlobals.uploadPointer[folderId] += 1;
                    el.name = 'image'+MyGlobals.uploadPointer[folderId] + '.jpg';
                }

                MyGlobals.uploadItems[el.id] = el;
                record.setData({
                    'id': el.id,
                    'name': el.name,
                    'status': el.status,
                    'percent': el.percent,
                    'target': folderId,
                    'path': filePath
                });
                qStore.add(record);
            });
            qStore.sync();
            if (autoStart && autoStart.get('value') === 'true') {
                me.onQueueStartTapped();
            }
            //console.log(MyGlobals.uploadItems);
        });
        uploader.bind('UploadFile', function(up, file){
            delete MyGlobals.uploadItems[file.id];
        });
        uploader.bind('UploadProgress', function(up, file) {
            var rec;
            //console.log("percent: " + file.percent);
            if (Ext.isNumber(file.percent)) {
                rec = qStore.findRecord('id', file.id);
                if (rec) {
                    if (rec.get('percent') !== file.percent) {
                        rec.set('percent', file.percent);
                        rec.set('status', file.status);
                        qStore.sync();
                    }
                }
            }
        });
        uploader.bind('FileUploaded', function(up, file) {
            var rec = qStore.findRecord('id', file.id),
                tp = MyGlobals.menuPanel.getComponent('tabPanel');
            if (rec) {
                qStore.remove(rec);
                qStore.sync();
            }
            if (qStore.getCount() === 0) {
                // Queue is empty, remove it
                me.uploaders.forEach(function(up) {
                    up.splice(0);
                    //up.destroy();
                });
                //me.uploaders = [];
                // qStore.removeAll(true);
                tp.remove(me.uploadQueue, true);
                me.uploadQueue = null;
            }
            folderStore.load();
        });
        uploader.bind('UploadComplete', function(up, files) {
            folderStore.load();
        });
        uploader.bind('Error', function(up, err) {
            var rec, msg = '';
            // console.log("========================");
            // console.log(err);
            if (err.file) {
                rec = qStore.findRecord('id', err.file.id);
                if (rec) {
                    rec.set('status', err.file.status);
                    if (err.message) {
                        msg = err.message + ' ';
                    }
                    if (err.status) {
                        msg += ' ' + err.status;
                    }
                    if (msg !== '') {
                        rec.set('message', msg);
                    }
                    qStore.sync();
                }
            }
            up.refresh();
        });
    },

    launch: function() {
        MyGlobals.uploadController = this;
        this.uploaders = [];
    },

    onQueueCancelTapped: function() {
        var me = this,
            qStore = Ext.getStore('UploadQueue'),
            qView = me.uploadQueue.getComponent('Queue'),
            tp = MyGlobals.menuPanel.getComponent('tabPanel'),
            wasRunning = false;

        MyGlobals.uploadItems = {};
        // Remove all uploads and the queue
        me.uploaders.forEach(function(up) {
            up.splice(0);
            //up.destroy();
        });
        //me.uploaders = [];
        qStore.removeAll(true);
        tp.remove(me.uploadQueue, true);
        me.uploadQueue = null;

        // me.uploaders.forEach(function(up) {
        //     if (up.state === plupload.RUNNING) {
        //         up.stop();
        //         wasRunning = true;
        //     }
        // });
        // if (0 < qView.getSelectionCount()) {
        //     // Remove selected files
        //     qView.getSelection().forEach(function(rec) {
        //         if (rec.get('status') < 4) {
        //             me.uploaders.forEach(function(up) {
        //                 var f = up.getFile(rec.get('id'));
        //                 if (f) {
        //                     up.removeFile(f);
        //                     if(typeof MyGlobals.uploadItems[rec.get('id')] !== 'undefined'){
        //                         delete MyGlobals.uploadItems[rec.get('id')];
        //                     }
        //                 }
        //             });
        //         }
        //         qStore.remove(rec);
        //     });
        //     qStore.sync();
        //     if (wasRunning) {
        //         me.uploaders.forEach(function(up) {
        //             up.start();
        //         });
        //     }
        // } else {
        //     MyGlobals.uploadItems = {};
        //     // Remove all uploads and the queue
        //     me.uploaders.forEach(function(up) {
        //         up.splice(0);
        //         //up.destroy();
        //     });
        //     //me.uploaders = [];
        //     qStore.removeAll(true);
        //     tp.remove(me.uploadQueue, true);
        //     me.uploadQueue = null;
        // }
    },

    onQueueStartTapped: function() {
        var me = this,
            qStore = Ext.getStore('UploadQueue'),
            toolbar = me.uploadQueue.down('toolbar');

        MyGlobals.uploadItems = {};
        toolbar.getComponent('Start').hide();
        toolbar.getComponent('Stop').show();
        me.uploaders.forEach(function(up) {
            up.files.forEach(function(file){
                var rec;
                if(file.status === 4){
                    console.log(file);
                    file.status = 1;

                    rec = qStore.findRecord('id', file.id);
                    if (rec) {
                        rec.set('status', file.status);
                        rec.set('message', "");
                        qStore.sync();
                    }

                }
            });
            up.start();
        });
    },

    onQueueStopTapped: function() {
        var me = this,
            toolbar = me.uploadQueue.down('toolbar');

        toolbar.getComponent('Stop').hide();
        toolbar.getComponent('Start').show();
        me.uploaders.forEach(function(up) {
            up.stop();
        });
    }

});