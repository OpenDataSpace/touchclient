/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ACMobileClient.controller.MyController', {
    extend: 'Ext.app.Controller',

    requires: [
        'ACMobileClient.utils.ACUtils'
    ],

    launch: function() {
        Ext.define('ACMobileClient.view.ViewportLogin', {
            extend: 'ACMobileClient.view.LoginPanel',
            config: {
                fullscreen: true
            }
        });

        Ext.define('ACMobileClient.view.ViewportMain', {
            extend: 'ACMobileClient.view.MainPanel',
            config: {
                fullscreen: true
            }
        });


        Ext.define('ACMobileClient.view.ViewportTest', {
            extend: 'ACMobileClient.view.MailViewContainer',
            config: {
                fullscreen: true
            }
        });

        var isPhone, utils, urlVars = getUrlVars(),
            globalViewPort;
        Ext.Ajax.setDefaultHeaders( {"Accept":"application/json"});
        Ext.JSON.encodeDate = function(d){
            return Ext.Date.format(d, '"YmdHisO"');
        };

        Ext.define('MyGlobals', { 
            'singleton': true, 
            'app': this,
            'menuPanel': null,
            'imageViewer': null,
            'previewContrainer': null,
            'mainPanel': null,
            'contentContainer': null,
            'lastObjectInContentContainer': null,
            'isPhone': false,
            'uploadController' : null,
            'showListButton': false,
            'uploadItems': {},
            'uploadPointer': {},
            'folderStructure': {},
            'myId':'',
            'sharedId':'',
            'globalId':'',
            'currentUser':'',
            'isDataspaceAdmin' : false,
            'isNarrow': function() {
                if (navigator.userAgent.match(/IEMobile/) || navigator.userAgent.match(/Trident\/7\.0/)){ //wp8 & wp8.1
                    if(Ext.Viewport.getWindowHeight()+200 >= Ext.Viewport.getWindowWidth()){
                        return true;
                    }
                    return false;
                }
                return Ext.Viewport.getOrientation() === 'portrait'; //this.isPhone || 
            }
        });

        Ext.define('ACUtils', {
            requires: [
            'ACMobileClient.utils.ACUtils'
            ],
            singleton: true,
            utils: null
        });

        utils = Ext.create('ACMobileClient.utils.ACUtils', {});
        utils.init();
        ACUtils.utils = utils;

        if (urlVars.isPhone) {
            isPhone = (urlVars.isPhone === 'true');
        }
        if (typeof isPhone === 'undefined') {
            isPhone = Ext.os.is.Phone;
        }

        MyGlobals.isPhone = isPhone;

        globalViewPort = Ext.create("ACMobileClient.view.ViewportLogin", {});
        globalViewPort.show();

        (function(){
            var _MsgAlert = Ext.Msg.alert,
                _MsgPrompt = Ext.Msg.prompt,
                _MsgConfirm = Ext.Msg.confirm,
                wp81 = navigator.userAgent.match(/Trident\/7\.0/); //wp8.1

            Ext.Msg.alert = function(title, message, fn){
                if(wp81){
                    window.alert(message);
                    if(typeof fn === "function"){
                        fn();
                    }
                } else {
                    _MsgAlert.apply(this, arguments);
                }
            }

            Ext.Msg.confirm = function(title, message, fn, scope){
                if(wp81){
                    if(window.confirm(message)){
                        if(typeof fn === "function"){
                            fn("ok");
                        }
                    }

                } else {
                    _MsgConfirm.apply(this, arguments);
                }
            }

            Ext.Msg.prompt = function(title, message, fn, scope, multiLine, value, prompt){
                if(wp81){ 
                    var folderName = window.prompt(message, (value ? value:"") ),
                        buttonId = "ok";
                    if(Ext.String.trim(folderName) === "" ){
                        buttonId = "";
                    }
                    if(typeof fn === "function"){
                        fn(buttonId, folderName);
                    }
                } else {
                    _MsgPrompt.apply(this, arguments);
                }
            }

        })();

    }

});