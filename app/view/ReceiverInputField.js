/*
 * File: app/view/ReceiverInputField.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ACMobileClient.view.ReceiverInputField', {
    extend: 'Ext.Container',
    alias: 'widget.ReceiverInputField',

    config: {
        padding: '',
        layout: {
            type: 'vbox'
        },
        items: [
            {
                xtype: 'container',
                flex: 0,
                cls: 'receiverContainer',
                padding: 5,
                layout: {
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'label',
                        flex: 0,
                        cls: 'toLabel',
                        html: 'An:',
                        itemId: 'toLabel',
                        margin: '0 5 0 0',
                        style: 'display:block'
                    },
                    {
                        xtype: 'container',
                        flex: 1,
                        itemId: 'inputContainer',
                        margin: '0 0 0 0',
                        padding: '',
                        ui: '',
                        layout: {
                            type: 'hbox'
                        },
                        items: [
                            {
                                xtype: 'container',
                                flex: 0,
                                itemId: 'receiverContainer',
                                maxHeight: 25,
                                style: 'display:inline-block;',
                                items: [
                                    {
                                        xtype: 'textareafield',
                                        height: 25,
                                        itemId: 'inputField',
                                        width: 50,
                                        labelWidth: 0
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                xtype: 'container',
                flex: 1,
                itemId: 'selectContainer',
                ui: '',
                layout: {
                    type: 'vbox'
                },
                scrollable: false
            }
        ],
        listeners: [
            {
                fn: 'onInputFieldKeyup',
                event: 'keyup',
                delegate: '#inputField'
            },
            {
                fn: 'onInputFieldAction',
                event: 'action',
                delegate: '#inputField'
            },
            {
                fn: 'onInputFieldClearicontap',
                event: 'clearicontap',
                delegate: '#inputField'
            },
            {
                fn: 'onContainerInitialize',
                event: 'initialize'
            }
        ]
    },

    onInputFieldKeyup: function(textfield, e, eOpts) {
        this.theTextField = textfield;
        console.log(e.browserEvent.keyCode);

        if (textfield.getValue().length === 0) {
            textfield.setWidth(50);
            if (e.browserEvent.keyCode === 8 && this.lastInputValue.length === 0) {
                //backspace on empty field
                if (!this.selectedItem) {
                    //first time, select last item
                    console.log("sel");
                    this.selectLastField();
                    this.deleteField();
                }
                else {
                    //delete last item
                    console.log("del");
                    this.deleteField();
                }
            }
            else {
                this.deselectField();
            }
        }
        else if (e.browserEvent.keyCode == 13) {
            var eml = textfield.getValue();
            eml = Ext.util.Format.trim(eml);
            if (eml.length>0) {
                if (this.config.entryCallback && this.config.entryCallback(eml)) {
                    textfield.setValue('');
                    this.search(true);
                    this.addField(eml, eml);
                    return false;
                }
                else {
                    textfield.setValue(eml);
                    return false;
                }
            }
            else {
                textfield.setValue('');
                return false;
            }
        }
        else {
            this.deselectField();
        }

        if (textfield.getValue().length > 6) {
            textfield.setWidth(150);
        }
        else if (textfield.getValue().length > 2) {
            textfield.setWidth(100);
        }

        var me = this;
        if (this.timer) clearTimeout(this.timer);
        this.timer = setTimeout(
        function() {
            me.search();
        }, 250);



    },

    onInputFieldAction: function(textfield, e, eOpts) {

    },

    onInputFieldClearicontap: function(textfield, e, eOpts) {
        var me = this;
        setTimeout(function() {
            me.search(true);
        }, 200);
    },

    onContainerInitialize: function(component, eOpts) {
        var list = Ext.create('ACMobileClient.view.ReceiverList', {
            itemId: 'receiverList',
            flex: 1,
            store: this.config.store,
            caller: this
        });
        this.down('#selectContainer').add(list);


        this.inputEmptyCounter = 0;
        this.lastInputValue = "";
        this.inputItems = new Array();
        this.selectedItem = null;
        this.theTextField = null;
        this.hasSearchResults = false;

        var me = this;
        var store = this.down('#receiverList').getStore();

        store.on('load', function(store, records) {
            me.inSearch = false;
            var amnt = records.length;
            setTimeout(function() {
                me.down('#selectContainer').setHeight(4*31+10);
                me.down('#receiverList').show();
                me.down('#selectContainer').addCls('receiverSearchContainer');
            },200);
        });

        this.handleInpField();

        this.down('#inputContainer').element.on('tap', function() {
            var theInpId = me.down('#inputField').element.down('textarea').id;
            document.getElementById(theInpId).focus();
        });
        me.down('#receiverList').hide();

    },

    search: function(force) {
        if (!this.inSearch || force) {

            this.down('#receiverList').deselectAll();
            var store = this.down('#receiverList').getStore();
            this.handleInpField();
            var value = this.down('#inputField').getValue();
            this.lastInputValue = value;

            if (value.length == 0) {
                var me = this;
                me.down('#inputField').setWidth(50);
                setTimeout(function() {
                    me.setHeight(null);
                    me.down('#selectContainer').setHeight(0);
                    me.down('#receiverList').hide();
                    me.down('#selectContainer').removeCls('receiverSearchContainer');
                },200);
            }
            else {
                this.inSearch = true;
                store.load({
                    params: {    
                        sessionId: MyGlobals.sessionId,
                        query: value
                    }
                });
            }
        }
    },

    focusField: function() {
        var me = this;
        var theInpId = me.down('#inputField').element.down('textarea').id;
        document.getElementById(theInpId).focus();

    },

    getReceivers: function() {
        var ret = new Array();

        for (var i=0;i<this.inputItems.length;i++) {
            ret[i] = {
                value: this.inputItems[i].value,
                text: this.inputItems[i].text
            };
        }

        return ret;

    },

    handleInpField: function() {
        var value = this.down('#inputField').getValue();

        if (value.length > 7 || this.inputItems.length == 0) {
            //resize the input field
            this.down('#inputField').removeCls('receiverInpFieldSmall');
            this.down('#inputField').addCls('receiverInpFieldLarge');
        }
        else {
            this.down('#inputField').removeCls('receiverInpFieldLarge');
            this.down('#inputField').addCls('receiverInpFieldSmall');
        }

    },

    addField: function(text, value) {
        var inpC = this.down('#inputContainer');

        var selField = Ext.create('ACMobileClient.view.ReceiverField', {
            html: text,
            value: value
        });
        selField.theParent = this;

        inpC.insert(this.inputItems.length, selField);
        this.inputItems[this.inputItems.length] = selField;

        var me = this;
        if (me.theTextField) {
            me.theTextField.focus();
        }

    },

    selectField: function(field) {
        if (this.selectedItem) {
            this.deselectField();
        }
        field.addCls('inputFieldSelected');
        this.selectedItem = field;
        this.focusField();
    },

    deselectField: function() {
        if (this.selectedItem != null) {
            this.selectedItem.removeCls('inputFieldSelected');
            this.selectedItem = null;
        }
    },

    selectLastField: function() {
        if (this.inputItems.length > 0) {
            var lastItem = this.inputItems[this.inputItems.length-1];
            this.selectField(lastItem);
        }
    },

    deleteField: function() {
        var inpC = this.down('#inputContainer');
        inpC.remove(this.selectedItem, true);
        var numb = -1;
        for (var i=0;i<this.inputItems.length;i++) {
            if (this.inputItems[i] == this.selectedItem) {
                numb = i;
                break;
            }
        }

        if (numb >= 0) {
            this.inputItems.splice(numb, 1);
        }
        this.selectedItem = null;

    }

});