/*
 * File: app/view/PreviewCarousel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ACMobileClient.view.PreviewCarousel', {
    extend: 'Ext.carousel.Carousel',
    alias: 'widget.mycarousel',

    requires: [
        'ACMobileClient.view.ImageViewer'
    ],

    config: {
        itemId: 'mycarousel', //#previewCarousel
        indicator:false,
        listeners: [
            {
                fn: 'onMycarouselActiveItemChange',
                event: 'activeitemchange'
            },
            {
                fn: 'onMycarouselRemove',
                event: 'remove'
            }
        ]
    },

    onMycarouselActiveItemChange: function(container, value, oldValue, eOpts) {
        var me = this;
        if (!this.isBeingRemoved) {
            ACUtils.utils.checkConnectionWithFunction(function() {
                if (oldValue) {
                    oldValue.viewerHidden();
                }
                if (value) {
                    console.log("itemChange 1");
                    if (me.secondTime) {
                        value.viewerShown();
                    }
                    me.secondTime = true;
                    console.log("itemChange 2");
                }
            });
        }
    },

    onMycarouselRemove: function(container, item, index, eOpts) {
        console.log("removing");
        this.isBeingRemoved = true;
    },

    initialize: function() {
        this.locked = true;
        this.onDragOrig = this.onDrag;
        this.onDrag = function (e) { 
            if(!this.locked) {
                this.onDragOrig(e);  
            } 
        };
    },

    enableWipe: function(enabled) {
        this.locked = !enabled;
    }

});