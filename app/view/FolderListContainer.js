/*
 * File: app/view/FolderListContainer.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ACMobileClient.view.FolderListContainer', {
    extend: 'Ext.Container',
    alias: 'widget.folderListContainer',

    config: {
        layout: {
            type: 'fit'
        },
        items: [
            {
                xtype: 'titlebar',
                docked: 'top',
                itemId: 'titleBar',
                layout: {
                    align: 'center',
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'button',
                        hidden: false,
                        itemId: 'backButton',
                        maxWidth: 100,
                        ui: 'back',
                        text: 'Back'
                    },
                    {
                        xtype: 'button',
                        align: 'right',
                        disabled: true,
                        itemId: 'uploadButton',
                        text: 'Upload'
                    }
                ]
            },
            {
                xtype: 'container',
                itemId: 'accordionContainer',
                layout: {
                    type: 'fit'
                }
            }
        ],
        listeners: [
            {
                fn: 'onBackButtonTap',
                event: 'tap',
                delegate: '#backButton'
            },
            {
                fn: 'onContainerActivate',
                event: 'activate'
            },
            {
                fn: 'onContainerInitialize',
                event: 'initialize'
            },
            {
                fn: 'onUploadButtonTap',
                event: 'tap',
                delegate: '#uploadButton'
            }
        ]
    },

    onBackButtonTap: function(button, e, eOpts) {
        button.disable();
        MyGlobals.menuPanel.navigateToParent2(this);
    },

    onContainerActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.down('#documentList').deselectAll();
    },

    onContainerInitialize: function(component, eOpts) {
        var list = Ext.create('ACMobileClient.view.FolderListList', {
            'itemId': 'documentList',
            'itemTpl': new Ext.XTemplate(
            '<div class="list_style">',
            '<div class="list_icons">',
            '<div class="list_icon list_icon_{classname}"></div>',
            '</div>',
            '<div class="list_entry">{[this.testing(name)]}{name}</div>',
            '</div>',
            {
                // XTemplate configuration:
                'disableFormats': true,
                // just a sample
                'testing': function(){
                    return '';
                }
            }
            )
        });
        this.getComponent('accordionContainer').add(list);
    },
    onUploadButtonTap: function(button, e, eOpts){
        console.log("uploadButton click")
        console.log(button.getId())
        // console.log(navigator.platform)
        // console.log(navigator.appName)
        // console.log(navigator.appVersion)
        // console.log(navigator.userAgent)

        if(navigator.platform == 'BlackBerry' || !(Ext.os.is.Windows || Ext.os.is.MacOS || Ext.os.is.Linux) ){
            var fileElement = null;
            var tmp = document.getElementById(document.getElementById(button.getId()).parentNode.id).getElementsByTagName('input')
            for(var i=0; i<tmp.length; i++){
                //console.log(tmp[i])
                if(tmp[i].type == 'file'){
                    //tmp[i].click();
                    fileElement = tmp[i];
                    break;
                }
            }

            if(!this.lastAction){   // first click
                this.lastAction = Date.now(); 
                fileElement.click()
            }else{
                if (this.lastAction && this.lastAction <= Date.now() - 1000){
                    this.lastAction = Date.now(); 
                    fileElement.click();
                }
            }
        }

        
    }

});